library(SDSFoundations)
install.packages("SDSFoundations")
install.packages("~/Desktop/SDSFoundations_1.1.tgz", repos = NULL)
library(SDAFoundations)
library(SDSFoundations)
BikeData <- BikeData
View(BikeData)
q()
?read.table
??read
q()
?read.csv
titanic <- read.csv("titanic_data.csv")
head(titanic)
tail(titanic)
summary(titanic)
?plot
plot(titanic$Sex, titanic$Survived)
hist(titanic$Sex, titanic$Survived)
boxplot(titanic$Sex, titanic$Survived)
cor(titanic$Sex, titanic$Survived)
plot(Survived ~ Sex, data = titanic)
library(ggplot2)
plot(titanic$Pclass, titanic$Survived)
?mean
mean(titanic$Survived[,"Sex" = "male"])
male <- titanic[, "Sex" = "male"]
male <- titanic[, titanic$Sex = "male"]
male <- titanic[, titanic$Sex == "male"]
male <- titanic[titanic$Sex == "male",]
mean(male$Survived)
female <- titanic[titanic$Sex == "female",]
mean(female$Survived)
mean(titanic[titanic$Sex == "male",]$male)
mean(titanic[titanic$Sex == "male",]$Survived)
mean(titanic[titanic$Sex == "female",]$Survived)
plot(titanic$Fare, titanic$Survived)
plot(titanic$Age, titanic$Survived)
plot(titanic$Cabin, titanic$Survived)
plot(titanic$Embarked, titanic$Survived)
mean(titanic[titanic$Embark == "C",]$Survived)
mean(titanic[titanic$Embark == "Q",]$Survived)
mean(titanic[titanic$Embark == "S",]$Survived)
C_embark <- titanic[titanic$Embark == "C",]
mean(C_embark[C_embark$Sex = "male",])
mean(C_embark[C_embark$Sex == "male",])
mean(C_embark[C_embark$Sex == "male",]$Survived)
mean(C_embark[C_embark$Sex == "female",]$Survived)
plot(titanic$SibSp, titanic$Survived)
plot(titanic$SibSp, titanic$Survived)
plot(titanic$Parch, titanic$Survived)
mean(titanic[titanic$SibSp == 0,]$Survived)
mean(titanic[titanic$SibSp == 1,]$Survived)
mean(titanic[titanic$SibSp == 2,]$Survived)
mean(titanic[titanic$SibSp == 3,]$Survived)
mean(titanic[titanic$SibSp == 4,]$Survived)
mean(female[titanic$SibSp == 1,]$Survived)
mean(female[female$SibSp == 1,]$Survived)
mean(female[female$SibSp == 2,]$Survived)
mean(female[female$SibSp == 3,]$Survived)
mean(female[female$SibSp == 4,]$Survived)
mean(female[female$SibSp == 5,]$Survived)
plot(weight ~ group, data = PlantGrowth)
plot(cut(weight, 2) ~ group, data = PlantGrowth)
?cut
plot(SibSp ~ Survived, data = titanic)
plot(SibSp ~ Survived, data = femal)
plot(SibSp ~ Survived, data = female)
plot(Survived ~ SibSp, data = female)
plot(cut(SibSp, 2) ~ Survived, data = female)
plot(cut(Survived, 2) ~ SibSp, data = female)
plot(SibSp ~ cut(Survived, 2), data = female)
plot(cut(Survived, 2) ~ SibSp, data = female)
q()
library(MASS)
library(ISLR)
install.packages("ISLR")
library(ISLR)
fix(Boston)
install("XQuartz")
install.packages("XQuartz")
fix(Boston)
q()
library(MASS)
library(ISLR)
names(Boston)
attach(Boston)
lm.fit <- lm(medv ~ lstat)
?Boston
lm.fit
lm.fit <- (medv ~ lstat, data = Boston)
lm.fit <- lm(medv ~ lstat, data = Boston)
lm.fit
summary(lm.fit)
names(lm.fit)
coef(lm.fit)
lm.fit$coefficients
lm.fit$residuals
confint(lm.fit)
predict(lm.fit, data.frame(lstat = (c(5, 10, 15))), interval = "confidence")
predict(lm.fit, data.frame(lstat = (c(5, 10, 15))), interval = "prediction")
plot(lstat, medv)
abline(lm.fit)
abline(lm.fit, lwd=3)
abline(lm.fit, lwd=3, col = "red")
plot(lstat, medv, col = "red")
plot(lstat, medv, pch = "+")
plot(1:20, 1:20, pch = 1:20)
par(mfrow = c(2, 2))
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
lm.fit <- lm(medv ~ lstat + age , data = Boston)
summary(lm.fit)
lm.fit <- lm(medv~., data = Boston)
summary(lm.fit)
library(car)
install.packages("car")
library(car)
vif(lm.fit)
lmfit1 <- lm(medv~.-age, data = Boston)
summary(lm.fit)
lm.fit1 <= update(lm.fit. ~. -age)
lm.fit1 <- update(lm.fit. ~. -age)
lm.fit1 <- update(lm.fit, ~. -age)
summary(lm(medv~lstat*age, data - Boston))
summary(lm(medv ~ lstat*age, data = Boston))
lm.fit2 <- lm(medv ~ lstat + I(lstat ^ 2))
summary(lm.fit2)
lm.fit <- lm(medv~lstat)
anova(lm.fit, lm.fit2)
par(mfrow = c(2, 2))
plot(lm.fit2)
lm.fit5 <- lm(medv ~ poly(lstat,5))
summary(lm.fit5)
summary(lm(medv ~ log(rm), data = Boston))
fix(Carseats)
names(Carseats)
lm.fit <- lm(Sales~. + Income:Advertising + Price: Age, data = Carseats)
summary(lm.fit)
attach(Carseats)
contrasts(ShelveLoc)
LoadLibraries
loadLibraries()
LoadLibraries < function() {}
LoadLibraries < function() {
library(ISLR)
library(MASS)
print("The libraries have been loaded.")
}
LoadLibraries <- function() {
library(ISLR)
library(MASS)
print("The libraries have been loaded.")
}
LoadLibraries
LoadLibraries()
q()
M <- [0 1/2 0 0; 1/3 0 0 1/2]
?matrix
M <- matrix(c(0, 1/2, 0), 1, 3)
M
matrix(c(1, 2, 3, 4), 2, 2)
M <- matrix(c(0, 1/3, 1/3, 1/3, 1/2, 0, 0, 1/2, 0, 0, 1/2, 0, 0, 1, 0, 0, 1/2, 1/2, 0), 4, 4)
M <- matrix(c(0, 1/3, 1/3, 1/3, 1/2, 0, 0, 1/2, 0, 0, 0, 1/2, 0, 0, 1, 0, 0, 1/2, 1/2, 0), 4, 4)
M
q()
??read html
??read
url = "https://myui.coworkforce.com/PaymentInformation"
library(XML)
tables <- readHTMLTable(url)
doc.html = htmlTreeParse(url, useInternal = TRUE)
doc.html
q()
exit()
exit
q()
?glm
View(M)
?glm
quit
quit()
quit
quit()
quit()
load("~/WSR/edX_AnalyticsEdge/.RData")
load("~/WSR/.RData")
mean(c(7921,5184,8836,4761))
8836-4761
(4761-6675.5)/4075
pow_two <- function(a) {
return a*a
3*3
a= 4
a*a
triple <- function(x) {
3 * x
}
pow_two <- function(a) {
a * a
}
triple <- function(x) {
3 * x
}
triple <- function(x) {
3 * x
}
triple(-4)
pow_two(-4)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
my_filter(5)
my_filter(-5)
hello()
str(hello())
source('~/.active-rstudio-document')
hello()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
pow_two(5)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
pow_two(5)
?for
help(for)
help for
help dplyr
?dplyr
?for loop
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
pow_two(4)
source('~/.active-rstudio-document')
pow_two(4)
exit
exit()
quit()
getwd()
R.version.string
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
play()
cran
nxt()
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
cran
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linuz-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version, ip_id))
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarise(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
exit()
quit()
pnorm(24, mean = 21, sd = 5)
qnorm(.10, 21, 5)
pnorm(50, 45, 3.2)
qnorm(.9406, 45, 3.2)
qnorm(.20, 77, 5)
choose(9,2)
dbinom(8, 10, 0.13)
dbinom(230, 1000, 0.262)
?dbinom
pbinom(230, 1000, 0.262)
sqrt(1000*0.2628(1-0.2628))
sqrt(9)
sqrt(1000*0.2628*(1-0.2628))
1 - pbinom(300, 1000, 0.262)
sum(dbinom(70:235, size = 245, p = 0.25))
1 - pnorm(70, 61.25, 6.78)
1 - pnorm(69.5, 61.25, 6.78)
0.015*500
25*0.45
dbinom(6, 10, 0.56)
dbinom(2, 10, 0.56)
dbinom(600, 1000, 0.56)
sum(dbinom(60:100, 100, 0.56))
quit()
pnorm(0.975)
qnorm(0.975)
qnorm(0.90)
(1.28*9/2)^2
qnorm(.01)
0.15/1.96
qnorm(0.5)
qnorm(0.05)
1-qnorm(0.95)
qnorm(0.95)
qnorm(0.975)
quit()
getwd()
setwd("~/WSR/Coursera_GCD_201510/UCI HAR Dataset")
subject_train <- read.table("subject_train.txt")
subject_train <- read.table("/train/subject_train.txt")
getwd()
subject_train <- read.table("train/subject_train.txt")
head(subject_train)
X_train <- read.table("train/X_train.txt")
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
?data.table
tables()
table()
y_train <- read.table("train/y_train.txt")
getwd()
file.name <- dir("Inertial Signals", pattern = ".txt")
file.name
file.name <- dir("train/Inertial Signals", pattern = ".txt")
file.name
?lapply()
summary(X_train)
str(X_train)
typeof(X_train)
type(X_train)
X_train <- data.table(X_train)
str(X_train)
summary(X_train)
X_train
summarize(X_train)
y_train <- data.table(y_train)
y_train
subject_train <- data.table(subject_train)
subject_train
body_acc_x_train <- read.table("train/Inertial Signals/body_acc_x_train.txt")
body_acc_x_train <- data.table(body_acc_x_train)
str(body_acc_x_train)
total_acc_x_train <- read.table("train/Inertial Signals/total_acc_x_train.txt")
total_acc_x_train <- data.table(total_acc_x_train)
View(body_acc_x_train)
View(subject_train)
View(y_train)
View(X_train)
rm(body_acc_x_train)
rm(total_acc_x_train)
rm(file.name)
subject_test <- read.table("/test/subject_train.txt")
subject_train <- read.table("train/subject_train.txt")
subject_test <- read.table("test/subject_train.txt")
subject_test <- read.table("test/subject_test.txt")
X_test <- read.table("test/X_test.txt")
y_test <- read.table("test/y_test.txt")
subject_test <- data.table(subject_test)
X_test <- data.table(X_test)
y_test <- data.table(y_test)
activity_labels <- read.table("activity_labels.txt")
features <- read.table("features.txt")
activity_labels <- data.table(activity_labels)
features <- data.table(features)
subject <- rbind(subject_train, subject_test)
X <- rbind(X_train, X_test)
y <- rbind(y_train, y_test)
str(y)
View(X)
View(y)
View(subject)
View(features)
features
mns <- select(features, V2 == *mean*)
mns <- select(features, V2 == "*mean*")
?select
mns <- select(features, contains("mean"))
mns <- select(features$V2, contains("mean"))
mns <- select(features, V2)
mns
mns <- filter(features, V2 == "*mean*")
mns
mns <- filter(features, V2 == "tBodyAcc-mean()-X")
mns
?subset
features$V2 == "tBodyAcc-mean()-X"
features$V2 == "*mean*"
features$V2 == "mean"
View(mns)
features$V2 == "(.*)mean(.*)"
?grepl
grepl("*mean*", features$V2)
grepl("*mean*" | "*std*", features$V2)
grepl("*[mean, std]*", features$V2)
grepl("*[mean | std]*", features$V2)
grepl("mean", features$V2)
grepl("mean|std", features$V2)
picks <- grepl("mean|std", features$V2)
picks
select(features, picks)
filter(features, picks)
rm(mns)
rm(grepl(testVirtual()))
rm(grepl(test))
rm("grepl(test)"")
)
rm("grepl(test)")
rm(subject_test)
rm(subject_train)
rm(X_test)
rm(X_train)
rm(y_test)
rm(y_train)
colnames(X) <- features$V2
colnames(X) <- as.character(features$V2)
colnames(subject) <- c("subject")
View(activity_labels)
?mutate
mutate(y, activity = activity_labels[V1,2])
View(y)
mutate(y, activity = V1*5)
y <- mutate(y, activity = activity_labels[V1,2])
View(y)
y <- mutate(y, activity = V1*2)
View(y)
y <- mutate(y, activity = activity_labels[V1,2])
View(y)
y <- mutate(y, activity = activity_labels[V1,1])
View(y)
y <- mutate(y, activity = activity_labels[V1,7])
View(y)
y <- mutate(y, activity = activity_labels$V2)
y$activity <- NULL
View(y)
y_activity <- cbind(y, activity_labels)
y$activity <- activity_labels[y$V1, 2]
View(y)
y$activity <- activity_labels[y$V1, V2]
View(y)
View(subject)
View(y_activity)
rm(y_activity)
View(y)
total <- cbind(subject, y$activity, X)
total
str(total)
View(total)
activity <- activity_labels[y$V1, V2]
total <- cbind(subject, activity, X)
View(total)
tidy <- filter(features, picks)
View(tidy)
?filter
tidy <- select(features, picks)
tidy <- total[,picks]
tidy <- total[picks,]
View(tidy)
tidy <- total[,picks]
picks
tidy <- select(total, grepl("mean|std", features$V2))
cols <- which(picks)
X_selected <- select(total, X)
X_selected <- select(X, cols)
View(X_selected)
tidy <- cbind(subject, activity, X_selected)
View(tidy)
?table.write
?write.table
write.table(tidy, file = "tidy.txt", row.name=FALSE)
rm(subject_train, subject_test, X_train, X_test, y_train, y_test)
source('~/WSR/Coursera_GCD_201510/UCI HAR Dataset/run_analysis.R')
View(tidy)
View(features)
features_selected <- select(featues, cols)
features_selected <- select(features, cols)
features_selected <- filter(features, cols)
View(features_selected)
write.table(features_selected, file = "features_selected.txt")
write.table(features_selected$V2, file = "features_selected.txt")
?write.table()
activity
View(activity_labels)
View(tidy)
